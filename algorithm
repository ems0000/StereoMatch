import os
import pickle
import sys

from scipy.ndimage.filters import median_filter
import numpy as np
from PIL import image
import cv2
import pyximport; pyximport.install()
import main_
from skimage import io, exposure, img_as_uint, img_as_float

DEBUG = 1
IMG_DIR = ''

def match(x0,x1):
    # ad
    ad_vol = main_.ad_vol(x0,x1)

    if DEBUG:
        pred = ad_vol.argmin(0).astype(np.float64)*scale
        Image.fromarray(pred.astype(np.uint8)).save(os.path.join(IMG_DIR,'absdiff_vol.png'))

    # census
    x0c = main_.census_transform(x0)
    x1c = main_.census_transform(x1)
    census_vol = np.ones((disp_max, height, width))*np.inf
    for i in range (disp_max):
        census_vol[i,:,i:] = np.sum(x0c[:,i:] != x1c[:,:width - i],2)
    census_vol /= 3

if DEBUG:
        pred = census_vol.argmin(0).astype(np.float64) * scale
        Image.fromarray(pred.astype(np.uint8)).save(os.path.join(IMG_DIR, 'census_vol.png'))

    # adcensus
    def rho(c, lambda_):
        return 1 - np.exp(-c / lambda_)

    ad_vol_robust = rho(ad_vol, 10)
    census_vol_robust = rho(census_vol, 30)
    adcensus_vol = ad_vol_robust + census_vol_robust

    if DEBUG:
        pred = adcensus_vol.argmin(0).astype(np.float64) * scale
        Image.fromarray(pred.astype(np.uint8)).save(os.path.join(IMG_DIR, 'adcensus_vol.png'))

    # cbca
    x0c = main_.cross(x0)
    x1c = main_.cross(x1)

    for i in range(2):
        adcensus_vol = main_.cbca(x0c, x1c, adcensus_vol, 0)
        adcensus_vol = main_.cbca(x0c, x1c, adcensus_vol, 1)
        
    if DEBUG:
        pred = adcensus_vol.argmin(0).astype(np.float64) * scale
        Image.fromarray(pred.astype(np.uint8)).save(os.path.join(IMG_DIR, 'cbca_vol.png'))

    # semi-global matching scanline
    c2_vol = main_.sgm(x0, x1, adcensus_vol)

    if DEBUG:
        pred = c2_vol.argmin(0).astype(np.float64) * scale
        Image.fromarray(pred.astype(np.uint8)).save(os.path.join(IMG_DIR, 'sgm_vol.png'))

    return c2_vol
